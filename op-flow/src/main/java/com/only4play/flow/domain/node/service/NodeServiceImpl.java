// ---Auto Generated by Only4Play ---
package com.only4play.flow.domain.node.service;

import java.util.List;

import com.only4play.common.utils.StreamUtils;
import com.only4play.flow.domain.node.Node;
import com.only4play.flow.domain.node.QNode;
import com.only4play.flow.domain.node.dto.creator.NodeCreator;
import com.only4play.flow.domain.node.mapper.NodeMapper;
import com.only4play.flow.domain.node.repository.NodeRepository;
import com.querydsl.core.BooleanBuilder;

import cn.hutool.core.collection.IterUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Slf4j
@RequiredArgsConstructor
public class NodeServiceImpl implements INodeService {
    private final NodeRepository nodeRepository;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void batchCreateNode(String chainId, List<NodeCreator> creatorList) {
        BooleanBuilder bb = new BooleanBuilder().and(QNode.node.chainId.eq(chainId));
        Iterable<Node> all = nodeRepository.findAll(bb);
        if (IterUtil.isNotEmpty(all)) {
            nodeRepository.deleteByChainId(chainId);
        }
        List<Node> nodes = StreamUtils.toList(creatorList, NodeMapper.INSTANCE::creator2Entity);
        nodeRepository.saveAll(nodes);
    }

}
