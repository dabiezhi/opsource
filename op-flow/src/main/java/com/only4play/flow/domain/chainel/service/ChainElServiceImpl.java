// ---Auto Generated by Only4Play ---
package com.only4play.flow.domain.chainel.service;

import java.util.Optional;

import com.only4play.flow.domain.chainel.ChainEl;
import com.only4play.flow.domain.chainel.QChainEl;
import com.only4play.flow.domain.chainel.dto.creator.ChainElCreatorOrUpdater;
import com.only4play.flow.domain.chainel.mapper.ChainElMapper;
import com.only4play.flow.domain.chainel.repository.ChainElRepository;
import com.only4play.jpa.support.EntityOperations;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class ChainElServiceImpl implements IChainElService {
    private final ChainElRepository chainElRepository;

    /**
     * createImpl
     */
    @Override
    public void createOrUpdateChainEl(ChainElCreatorOrUpdater creatorOrUpdater) {
        Optional<ChainEl> chainEl = chainElRepository.findOne(
                QChainEl.chainEl.chainId.eq(creatorOrUpdater.getChainId()));
        if (chainEl.isPresent()) {
            EntityOperations.doUpdate(chainElRepository).load(chainEl::get).update(
                    e -> creatorOrUpdater.updateChainEl(e)).execute();
        } else {
            EntityOperations.doCreate(chainElRepository).create(
                    () -> ChainElMapper.INSTANCE.dtoToEntity(creatorOrUpdater)).update(e -> e.init()).execute();
        }
    }


}
