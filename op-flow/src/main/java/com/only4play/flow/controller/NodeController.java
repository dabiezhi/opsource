// ---Auto Generated by Only4Play ---
package com.only4play.flow.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.flow.domain.node.creator.NodeCreator;
import com.only4play.flow.domain.node.mapper.NodeMapper;
import com.only4play.flow.domain.node.query.NodeQuery;
import com.only4play.flow.domain.node.request.NodeQueryRequest;
import com.only4play.flow.domain.node.request.NodeUpdateRequest;
import com.only4play.flow.domain.node.response.NodeResponse;
import com.only4play.flow.domain.node.service.INodeService;
import com.only4play.flow.domain.node.updater.NodeUpdater;
import com.only4play.flow.domain.node.vo.NodeVO;
import com.only4play.flow.domain.node.request.NodeCreateRequest;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("node/v1")
@RequiredArgsConstructor
public class NodeController {
  private final INodeService nodeService;

  /**
   * createRequest
   */
  @PostMapping("createNode")
  public JsonObject<Long> createNode(@RequestBody NodeCreateRequest request) {
    NodeCreator creator = NodeMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(nodeService.createNode(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateNode")
  public JsonObject<String> updateNode(@RequestBody NodeUpdateRequest request) {
    NodeUpdater updater = NodeMapper.INSTANCE.request2Updater(request);
    nodeService.updateNode(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validNode(@PathVariable Long id) {
    nodeService.validNode(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidNode(@PathVariable Long id) {
    nodeService.invalidNode(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<NodeResponse> findById(@PathVariable Long id) {
    NodeVO vo = nodeService.findById(id);
    NodeResponse response = NodeMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<NodeResponse>> findByPage(
      @RequestBody PageRequestWrapper<NodeQueryRequest> request) {
    PageRequestWrapper<NodeQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(NodeMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<NodeVO> page = nodeService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> NodeMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
