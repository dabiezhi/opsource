// ---Auto Generated by Only4Play ---
package com.only4play.flow.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.flow.domain.chain.creator.ChainCreator;
import com.only4play.flow.domain.chain.mapper.ChainMapper;
import com.only4play.flow.domain.chain.query.ChainQuery;
import com.only4play.flow.domain.chain.request.ChainCreateRequest;
import com.only4play.flow.domain.chain.request.ChainQueryRequest;
import com.only4play.flow.domain.chain.request.ChainUpdateRequest;
import com.only4play.flow.domain.chain.response.ChainResponse;
import com.only4play.flow.domain.chain.service.IChainService;
import com.only4play.flow.domain.chain.updater.ChainUpdater;
import com.only4play.flow.domain.chain.vo.ChainVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("chain/v1")
@RequiredArgsConstructor
public class ChainController {
  private final IChainService chainService;

  /**
   * createRequest
   */
  @PostMapping("createChain")
  public JsonObject<Long> createChain(@RequestBody ChainCreateRequest request) {
    ChainCreator creator = ChainMapper.INSTANCE.request2Creator(request);
    return JsonObject.success(chainService.createChain(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateChain")
  public JsonObject<String> updateChain(@RequestBody ChainUpdateRequest request) {
    ChainUpdater updater = ChainMapper.INSTANCE.request2Updater(request);
    chainService.updateChain(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validChain(@PathVariable Long id) {
    chainService.validChain(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidChain(@PathVariable Long id) {
    chainService.invalidChain(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<ChainResponse> findById(@PathVariable Long id) {
    ChainVO vo = chainService.findById(id);
    ChainResponse response = ChainMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<ChainResponse>> findByPage(
      @RequestBody PageRequestWrapper<ChainQueryRequest> request) {
    PageRequestWrapper<ChainQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(ChainMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<ChainVO> page = chainService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> ChainMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
