// ---Auto Generated by Only4Play ---
package com.only4play.flow.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.PageResult;
import com.only4play.common.model.Result;
import com.only4play.flow.domain.chain.dto.ChainCreateReq;
import com.only4play.flow.domain.chain.dto.ChainQueryReq;
import com.only4play.flow.domain.chain.dto.ChainReleaseReq;
import com.only4play.flow.domain.chain.dto.ChainResp;
import com.only4play.flow.domain.chain.dto.ChainUpdateReq;
import com.only4play.flow.domain.chain.service.IChainService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("chain/v1")
@RequiredArgsConstructor
public class ChainController {
    private final IChainService chainService;


    /**
     * createRequest
     */
    @PostMapping("create")
    public Result<Long> createChain(@RequestBody ChainCreateReq req) {
        return Result.success(chainService.createChain(req));
    }

    /**
     * update request
     */
    @PostMapping("update")
    public Result<String> updateChain(@RequestBody ChainUpdateReq req) {
        chainService.updateChain(req);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * releaseRequest
     */
    @PostMapping("release")
    public Result<String> releaseChain(@RequestBody ChainReleaseReq req) {
        chainService.releaseChain(req);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public Result<String> validChain(@PathVariable Long id) {
        chainService.validChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public Result<String> invalidChain(@PathVariable Long id) {
        chainService.invalidChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * delete
     */
    @PostMapping("delete/{id}")
    public Result<String> deleteChain(@PathVariable Long id) {
        chainService.deleteChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public Result<ChainResp> findById(@PathVariable Long id) {
        return Result.success(chainService.findById(id));
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public Result<PageResult<ChainResp>> findByPage(@RequestBody ChainQueryReq req) {
        Page<ChainResp> page = chainService.findByPage(req);
        return Result.success(
                PageResult.of(page.getContent(), page.getTotalElements(), page.getSize(), page.getNumber()));
    }

}
