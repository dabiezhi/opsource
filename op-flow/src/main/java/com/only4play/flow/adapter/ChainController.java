// ---Auto Generated by Only4Play ---
package com.only4play.flow.adapter;

import java.util.Map;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.PageResult;
import com.only4play.common.model.PageWrapper;
import com.only4play.common.model.Result;
import com.only4play.flow.application.chain.IChainService;
import com.only4play.flow.application.chain.dto.ChainCreateRequest;
import com.only4play.flow.application.chain.dto.ChainQueryRequest;
import com.only4play.flow.application.chain.dto.ChainResponse;
import com.only4play.flow.application.chain.dto.ChainUpdateRequest;
import com.yomahub.liteflow.core.FlowExecutor;
import com.yomahub.liteflow.flow.FlowBus;
import com.yomahub.liteflow.flow.LiteflowResponse;
import com.yomahub.liteflow.flow.element.Chain;
import com.yomahub.liteflow.flow.element.Node;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("chain/v1")
@RequiredArgsConstructor
public class ChainController {
    private final IChainService chainService;
    private final FlowExecutor  flowExecutor;

    /**
     * createRequest
     */
    @PostMapping("createChain")
    public Result<Long> createChain(@RequestBody ChainCreateRequest request) {
        return Result.success(chainService.createChain(request));
    }

    /**
     * update request
     */
    @PostMapping("updateChain")
    public Result<String> updateChain(@RequestBody ChainUpdateRequest request) {
        chainService.updateChain(request);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public Result<String> validChain(@PathVariable Long id) {
        chainService.validChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public Result<String> invalidChain(@PathVariable Long id) {
        chainService.invalidChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * delete
     */
    @PostMapping("delete/{id}")
    public Result<String> deleteChain(@PathVariable Long id) {
        chainService.deleteChain(id);
        return Result.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public Result<ChainResponse> findById(@PathVariable Long id) {
        return Result.success(chainService.findById(id));
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public Result<PageResult<ChainResponse>> findByPage(@RequestBody PageWrapper<ChainQueryRequest> request) {

        Map<String, Chain> chainMap = FlowBus.getChainMap();
        Map<String, Node> nodeMap = FlowBus.getNodeMap();

        LiteflowResponse liteflowResponse = flowExecutor
            .execute2Resp("c3793dca-661d-46c7-96f6-bc882860e7d2");

        Page<ChainResponse> page = chainService.findByPage(request);
        return Result.success(PageResult.of(page.getContent(), page.getTotalElements(),
            page.getSize(), page.getNumber()));
    }
}
